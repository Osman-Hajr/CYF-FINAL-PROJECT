[{"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\index.js":"1","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\App.js":"2","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\use-auth.js":"3","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\FooterComponent\\Footer.js":"4","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\StudentMainPage.js":"5","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\index.js":"6","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\HTML-CSS\\HTML_CSS.jsx":"7","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\JavaScript\\JavaScript.jsx":"8","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\NodeJS\\NodeJS.jsx":"9","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\REACTJS\\REACTJS.jsx":"10","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\PostgreSQL\\PostgreSQL.jsx":"11","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\useLocalstorage.js":"12","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\StudentModulesBody.js":"13","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\StudentSideBar.jsx":"14","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\PrivateRouth.js":"15","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\RegisterPage.js":"16","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\useFetch.js":"17","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\HomePage.js":"18","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\HeaderComponent\\Header.js":"19","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\UI\\Spinner.js":"20","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\RegisterForm.js":"21","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\LoginForm.js":"22","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\HeaderComponent\\Logo.js":"23","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\HeroImage\\HeroImage.js":"24","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\Git-GitHub\\Git_Github.jsx":"25"},{"size":249,"mtime":1609870603604,"results":"26","hashOfConfig":"27"},{"size":2037,"mtime":1610460391013,"results":"28","hashOfConfig":"27"},{"size":2862,"mtime":1610467747946,"results":"29","hashOfConfig":"27"},{"size":615,"mtime":1609942568242,"results":"30","hashOfConfig":"27"},{"size":2170,"mtime":1610467747979,"results":"31","hashOfConfig":"27"},{"size":363,"mtime":1610133669634,"results":"32","hashOfConfig":"27"},{"size":3745,"mtime":1610467747989,"results":"33","hashOfConfig":"27"},{"size":4089,"mtime":1610467747991,"results":"34","hashOfConfig":"27"},{"size":3717,"mtime":1610467747992,"results":"35","hashOfConfig":"27"},{"size":3671,"mtime":1610467747996,"results":"36","hashOfConfig":"27"},{"size":3738,"mtime":1610467747994,"results":"37","hashOfConfig":"27"},{"size":1341,"mtime":1609870603557,"results":"38","hashOfConfig":"27"},{"size":3173,"mtime":1610467747997,"results":"39","hashOfConfig":"27"},{"size":1332,"mtime":1610467748001,"results":"40","hashOfConfig":"27"},{"size":703,"mtime":1609870603604,"results":"41","hashOfConfig":"27"},{"size":628,"mtime":1610133669600,"results":"42","hashOfConfig":"27"},{"size":1022,"mtime":1609870603557,"results":"43","hashOfConfig":"27"},{"size":1047,"mtime":1610467747948,"results":"44","hashOfConfig":"27"},{"size":1246,"mtime":1610467747982,"results":"45","hashOfConfig":"27"},{"size":308,"mtime":1609870603604,"results":"46","hashOfConfig":"27"},{"size":4352,"mtime":1610208069740,"results":"47","hashOfConfig":"27"},{"size":2584,"mtime":1610467747984,"results":"48","hashOfConfig":"27"},{"size":317,"mtime":1609870603604,"results":"49","hashOfConfig":"27"},{"size":400,"mtime":1609870603604,"results":"50","hashOfConfig":"27"},{"size":3711,"mtime":1610467747987,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1a2chu2",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"54"},"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\index.js",[],["111","112"],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\App.js",["113"],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\use-auth.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\FooterComponent\\Footer.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\StudentMainPage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\index.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\HTML-CSS\\HTML_CSS.jsx",["114","115"],"\r\nimport React, { useState } from \"react\";\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport { Table, Button, Tag } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./HTML_CSS.scss\";\r\n\r\n\r\nexport default function HTML_CSS() {\r\n  let { status, data, error } = useFetch(\r\n    \"http://localhost:3001/api/Modules/HTML_CSS/Topics\"\r\n  );\r\n  console.log(data);\r\n\r\n  if (status === \"error\") {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === \"success\") {\r\n    return <HtmlTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n}\r\n\r\nconst HtmlTopicList = ({ data }) => {\r\n  // let history = useHistory();\r\n  //let auth = useAuth();\r\n\r\n  console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"HTML-CSS Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\JavaScript\\JavaScript.jsx",["116","117","118","119"],"import React, { useState } from \"react\";\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport { Table, Button, Tag } from \"antd\";\r\nimport { Progress } from 'antd';\r\n//import \"antd/dist/antd.css\";\r\nimport \"./JavaScript.scss\";\r\n//import { Fragment } from \"react\";\r\n//import Demo from \"./PrsgsBarJs\";\r\n\r\n\r\nexport default function JavaScript() {\r\n  let { status, data, error } = useFetch(\r\n    \"http://localhost:3001/api/Modules/JavaScript/Topics\"\r\n  );\r\n /// console.log(data);\r\n\r\n  if (status === \"error\") {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === \"success\") {\r\n    return <JavaScriptTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n}\r\n\r\nconst JavaScriptTopicList = ({ data }) => {\r\n  \r\n // console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    //console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n   // console.log(value)\r\n  };\r\n\r\n  const addValue = (e) => {\r\n    //console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  \r\n  }\r\n  ////////////////////////////////////////////////\r\n\r\n  \r\n  // const Demo =(e) => {\r\n  //   // let name = e.currentTarget.id;\r\n  //   // let value = e.currentTarget.value;\r\n  //   // setState({\r\n  //   //   ...state,\r\n  //   //   selected: { ...state.selected, [name]: value },\r\n  //   // })\r\n  //   return (\r\n  //     <div>\r\n  //        <Progress\r\n  //       strokeColor={{\r\n  //         from: '#108ee9',\r\n  //         to: '#87d068',\r\n  //       }}\r\n  //       percent={50}\r\n  //       status=\"active\"\r\n\r\n  //     />\r\n  //     </div>\r\n  //   )\r\n  // }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////\r\n\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"JavaScript Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <h1>JavaScript</h1>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\" id= \"submitBtn\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n      <Progress\r\n        strokeColor={{\r\n          from: '#108ee9',\r\n          to: '#87d068',\r\n        }}\r\n        percent={50}\r\n        status=\"active\"\r\n\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n    ","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\NodeJS\\NodeJS.jsx",["120","121"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./NodeJS.scss\";\r\n//import { ReactDOM } from 'react-dom';\r\n\r\nexport default function NodeJS() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/NodeJS/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <NodeJsTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst NodeJsTopicList = ({ data }) => {\r\n  console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"NodeJS Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\REACTJS\\REACTJS.jsx",["122","123"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./REACTJS.scss\";\r\n\r\n\r\nexport default function ReactJs() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/ReactJs/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <ReactJsTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst ReactJsTopicList = ({ data }) => {\r\n\r\n  console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"ReactJs Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\PostgreSQL\\PostgreSQL.jsx",["124","125"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./PostgreSQL.scss\";\r\n\r\n\r\nexport default function PostgreSQL() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/PostgreSQL/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <PostgreSqlTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst PostgreSqlTopicList = ({ data }) => {\r\n\r\n  console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"PostgreSQL Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\useLocalstorage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\StudentModulesBody.js",["126"],"import React,{useState} from 'react';\r\nimport {Route,Link} from 'react-router-dom';\r\nimport useFetch from '../../Auth/useFetch';\r\nimport Spinner from '../UI/Spinner';\r\nimport \"./StudentModulesBody.scss\";\r\n//import JavaScript from \"../../components/StudentComponents/Modules Components/JavaScript/JavaScript\";\r\n\r\n\r\n\r\n\r\nexport default function StudentModulesBody() {\r\n\r\n   let { status, data, error } = useFetch('http://localhost:3001/api/subjects');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <SubjectList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n  \r\nconst SubjectList = ({ data }) => {\r\n  const [subjects, setSubjects] = useState(data);\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      \r\n\r\n      <div className=\"row\">\r\n          {subjects.map(({ name }) => (\r\n            <div className= \"moduleDiv\">\r\n              <div className=\"text-center modules\" key={name}>\r\n                <Link to={`/modules/${name}`}>\r\n                <h2 className=\"\">{name}</h2>\r\n                </Link>\r\n                \r\n            </div>\r\n             <Route path={`/modules/${name}`} component={name} />\r\n             </div>\r\n          ))\r\n          }\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\StudentSideBar.jsx",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\PrivateRouth.js",["127"],"import { Route, Redirect } from 'react-router-dom';\r\nimport { useAuth } from '../Auth/use-auth';\r\nimport Spinner from './UI/Spinner';\r\n\r\n// A wrapper for <Route> that redirects to the login\r\n// screen if user not yet authenticated.\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n  let auth = useAuth();\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) => {\r\n        return auth.user ? (\r\n          children\r\n        ) : (\r\n          // <Redirect\r\n          //   to={{\r\n          //     pathname: '/',\r\n          //     state: { from: location },\r\n          //   }}\r\n          // />\r\n          <Spinner />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\RegisterPage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\useFetch.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\HomePage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\HeaderComponent\\Header.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\UI\\Spinner.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\RegisterForm.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\LoginForm.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\HeaderComponent\\Logo.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\HeroImage\\HeroImage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\Git-GitHub\\Git_Github.jsx",["128","129","130","131","132"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./Git_GitHub.scss\";\r\n\r\n\r\nexport default function Git_GitHub() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/Git-GitHub/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <GitTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst GitTopicList = ({data})=> {\r\n  console.log('this the data', data);\r\n    const tableHeaders = [\"0%-20%\", \"20%-40%\", \"40%-60%\", \"60%-80%\", \"80%-100%\"]\r\n    \r\n    const [state, setState] = useState({\r\n        task: { options: tableHeaders,\r\n         extras: data},\r\n        selected: {}\r\n      }\r\n      )\r\n      const onRadioChange = e => {\r\n        let name = e.currentTarget.name;\r\n        let value = e.currentTarget.value;\r\n        setState({\r\n          ...state,\r\n          selected: { ...state.selected, [name]: value }\r\n        });\r\n      };\r\n      const onSubmit = () => {\r\n        console.log(state.selected);\r\n        setState({\r\n          ...state,\r\n          selected: {}\r\n        });\r\n      };\r\n        let columns = [];\r\n        columns.push({\r\n          title: \"Topics\",\r\n          dataIndex: \"name\",\r\n          key: \"name\",\r\n          width: \"45vw\"\r\n        });\r\n        state.task.options.forEach((option, i) => {\r\n          columns.push({\r\n            title: option,\r\n            key: option,\r\n            render: row => {\r\n              return (\r\n                <input\r\n                  type=\"radio\"\r\n                  checked={state.selected[row.name] === option}\r\n                  onChange={onRadioChange}\r\n                  name={row.name}\r\n                  value={option}\r\n                />\r\n              );\r\n            }\r\n          });\r\n        });\r\n        let rowHeaders = [];\r\n        state.task.extras.forEach((extra, i) => {\r\n          rowHeaders.push({ name: `${i + 1}.${extra.name}` });\r\n        });\r\n        return (\r\n          <div>\r\n            <Table\r\n              columns={columns}\r\n              dataSource={rowHeaders}\r\n              size=\"middle\"\r\n              bordered\r\n              pagination={false}\r\n            />\r\n            <Tag color=\"red\">Selected options</Tag>\r\n            <br />\r\n            {JSON.stringify(state.selected)}\r\n            <br />\r\n            <Button onClick={onSubmit} type=\"primary\">\r\n              {\" \"}\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        );\r\n}\r\n",{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":43,"column":11,"nodeType":"139","endLine":43,"endColumn":24},{"ruleId":"140","severity":1,"message":"141","line":5,"column":25,"nodeType":"142","messageId":"143","endLine":5,"endColumn":28},{"ruleId":"144","severity":1,"message":"145","line":80,"column":45,"nodeType":"146","messageId":"147","endLine":80,"endColumn":47},{"ruleId":"140","severity":1,"message":"148","line":23,"column":15,"nodeType":"142","messageId":"143","endLine":23,"endColumn":26},{"ruleId":"140","severity":1,"message":"149","line":23,"column":50,"nodeType":"142","messageId":"143","endLine":23,"endColumn":60},{"ruleId":"150","severity":1,"message":"151","line":97,"column":3,"nodeType":"152","endLine":97,"endColumn":14,"suggestions":"153"},{"ruleId":"144","severity":1,"message":"145","line":135,"column":45,"nodeType":"146","messageId":"147","endLine":135,"endColumn":47},{"ruleId":"140","severity":1,"message":"141","line":4,"column":24,"nodeType":"142","messageId":"143","endLine":4,"endColumn":27},{"ruleId":"144","severity":1,"message":"145","line":75,"column":45,"nodeType":"146","messageId":"147","endLine":75,"endColumn":47},{"ruleId":"140","severity":1,"message":"141","line":4,"column":24,"nodeType":"142","messageId":"143","endLine":4,"endColumn":27},{"ruleId":"144","severity":1,"message":"145","line":76,"column":45,"nodeType":"146","messageId":"147","endLine":76,"endColumn":47},{"ruleId":"140","severity":1,"message":"141","line":4,"column":24,"nodeType":"142","messageId":"143","endLine":4,"endColumn":27},{"ruleId":"144","severity":1,"message":"145","line":76,"column":45,"nodeType":"146","messageId":"147","endLine":76,"endColumn":47},{"ruleId":"140","severity":1,"message":"154","line":26,"column":20,"nodeType":"142","messageId":"143","endLine":26,"endColumn":31},{"ruleId":"140","severity":1,"message":"155","line":1,"column":17,"nodeType":"142","messageId":"143","endLine":1,"endColumn":25},{"ruleId":"140","severity":1,"message":"141","line":4,"column":24,"nodeType":"142","messageId":"143","endLine":4,"endColumn":27},{"ruleId":"140","severity":1,"message":"148","line":21,"column":16,"nodeType":"142","messageId":"143","endLine":21,"endColumn":27},{"ruleId":"140","severity":1,"message":"149","line":21,"column":51,"nodeType":"142","messageId":"143","endLine":21,"endColumn":61},{"ruleId":"150","severity":1,"message":"151","line":78,"column":5,"nodeType":"152","endLine":78,"endColumn":16,"suggestions":"156"},{"ruleId":"144","severity":1,"message":"145","line":116,"column":45,"nodeType":"146","messageId":"147","endLine":116,"endColumn":47},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"react/jsx-pascal-case","Imported JSX component Git_GitHub must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-unused-vars","'Tag' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'gradeStatus' is assigned a value but never used.","'gradeError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["159"],"'setSubjects' is assigned a value but never used.","'Redirect' is defined but never used.",["160"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"161","fix":"163"},"Update the dependencies array to be: [gradeData, state]",{"range":"164","text":"165"},{"range":"166","text":"165"},[2321,2332],"[gradeData, state]",[1936,1947]]