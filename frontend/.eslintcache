<<<<<<< Updated upstream
[{"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\index.js":"1","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\App.js":"3","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Auth\\use-auth.js":"4","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Auth\\useLocalStorage.js":"5","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Auth\\useLocalstorage.js":"6","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\index.js":"7","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\UI\\Spinner.js":"8","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Auth\\useFetch.js":"9","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\PrivateRouth.js":"10","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\HeaderComponent\\Header.js":"11","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\HeaderComponent\\Logo.js":"12","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Pages\\StudentPages\\HomePage.js":"13","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\LoginForm.js":"14","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\HeroImage\\HeroImage.js":"15","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Pages\\StudentPages\\RegisterPage.js":"16","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\RegisterForm.js":"17","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\FooterComponent\\Footer.js":"18","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Pages\\StudentPages\\StudentMainPage.js":"19","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\StudentSideBar.jsx":"20","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\StudentModulesBody.js":"21","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\JavaScript\\JavaScript.jsx":"22","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\HTML-CSS\\HTML_CSS.jsx":"23","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\NodeJS\\NodeJS.jsx":"24","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\PostgreSQL\\PostgreSQL.jsx":"25","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\REACTJS\\REACTJS.jsx":"26","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\Git-GitHub\\Git_Github.jsx":"27"},{"size":236,"mtime":1609787476435,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":2037,"mtime":1610133629741,"results":"31","hashOfConfig":"29"},{"size":2822,"mtime":1610217763306,"results":"32","hashOfConfig":"29"},{"size":1341,"mtime":1609591035372,"results":"33","hashOfConfig":"29"},{"size":1341,"mtime":1609591035372,"results":"34","hashOfConfig":"29"},{"size":363,"mtime":1610032191517,"results":"35","hashOfConfig":"29"},{"size":308,"mtime":1609757786931,"results":"36","hashOfConfig":"29"},{"size":1022,"mtime":1609587725598,"results":"37","hashOfConfig":"29"},{"size":703,"mtime":1609759764283,"results":"38","hashOfConfig":"29"},{"size":1221,"mtime":1609759306664,"results":"39","hashOfConfig":"29"},{"size":317,"mtime":1609759540273,"results":"40","hashOfConfig":"29"},{"size":859,"mtime":1610199902273,"results":"41","hashOfConfig":"29"},{"size":2486,"mtime":1610050919568,"results":"42","hashOfConfig":"29"},{"size":400,"mtime":1609758973998,"results":"43","hashOfConfig":"29"},{"size":628,"mtime":1610050919560,"results":"44","hashOfConfig":"29"},{"size":4352,"mtime":1610133525606,"results":"45","hashOfConfig":"29"},{"size":615,"mtime":1609877515848,"results":"46","hashOfConfig":"29"},{"size":433,"mtime":1610061921773,"results":"47","hashOfConfig":"29"},{"size":1167,"mtime":1609967773431,"results":"48","hashOfConfig":"29"},{"size":1255,"mtime":1610097391182,"results":"49","hashOfConfig":"29"},{"size":4062,"mtime":1610284954432,"results":"50","hashOfConfig":"29"},{"size":2848,"mtime":1610277597236,"results":"51","hashOfConfig":"29"},{"size":2783,"mtime":1610278661392,"results":"52","hashOfConfig":"29"},{"size":2772,"mtime":1610278890481,"results":"53","hashOfConfig":"29"},{"size":2752,"mtime":1610279043273,"results":"54","hashOfConfig":"29"},{"size":2756,"mtime":1610279083098,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"xyaixa",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"58"},"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\index.js",[],["120","121"],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\reportWebVitals.js",[],["122","123"],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\App.js",["124"],"import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport {Header, PrivateRoute, Home, RegisterPage } from \"./components\";\r\nimport StudentMainPage from './Pages/StudentPages/StudentMainPage'\r\nimport { ProvideAuth } from \"../src/Auth/use-auth\";\r\nimport Footer from \"./components/FooterComponent/Footer\";\r\nimport JavaScript from \"./components/StudentComponents/Modules Components/JavaScript/JavaScript\";\r\nimport HTML_CSS from \"./components/StudentComponents/Modules Components/HTML-CSS/HTML_CSS\";\r\nimport Git_GitHub from \"./components/StudentComponents/Modules Components/Git-GitHub/Git_Github\";\r\n\r\nimport NodeJS from \"./components/StudentComponents/Modules Components/NodeJS/NodeJS\";\r\nimport PostgreSQL from \"./components/StudentComponents/Modules Components/PostgreSQL/PostgreSQL\";\r\nimport REACTJS from \"./components/StudentComponents/Modules Components/REACTJS/REACTJS\";\r\n\r\n\r\n\r\n\r\nfunction App({match}) {\r\n\treturn (\r\n\t\t\r\n\t\t<Router>\r\n\t\t\t<ProvideAuth>\r\n\t\t\t\t<Header />\r\n\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/\">\r\n                        <Home />\r\n\t\t\t\t\t\t</Route>\r\n                        <Route exact path=\"/register\">\r\n                            <RegisterPage />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<PrivateRoute path=\"/student_main\">\r\n\t\t\t\t\t\t\t<StudentMainPage />\r\n\t\t\t\t\t\t</PrivateRoute>\r\n\t\t\t\t\t\t<PrivateRoute path=\"/modules/JavaScript\">\r\n\t\t\t\t\t\t    <JavaScript />\r\n\t\t\t\t\t\t</PrivateRoute>\r\n\t\t\t\t\t\t<PrivateRoute path=\"/modules/HTML_CSS\">\r\n\t\t\t\t\t\t    <HTML_CSS />\r\n\t\t\t\t\t\t</PrivateRoute>\r\n\t\t\t\t\t\t<PrivateRoute path=\"/modules/Git_GitHub\">\r\n\t\t\t\t\t\t    <Git_GitHub/>\r\n\t\t\t\t\t\t</PrivateRoute>\r\n\t\t\t\t\t\t<PrivateRoute path=\"/modules/NodeJS\">\r\n\t\t\t\t\t\t<NodeJS />\r\n\t\t\t\t\t\t</PrivateRoute>\r\n\t\t\t\t\t\t<PrivateRoute path=\"/modules/PostgreSQL\">\r\n\t\t\t\t\t\t<PostgreSQL />\r\n\t\t\t\t\t\t</PrivateRoute>\r\n\t\t\t\t\t\t<PrivateRoute path=\"/modules/ReactJS\">\r\n\t\t\t\t\t\t<REACTJS/>\r\n\t\t\t\t\t\t</PrivateRoute>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</Container>\r\n\t\t\t\t<Footer />\r\n\t\t\t</ProvideAuth>\r\n\t\t</Router>\r\n\t);\r\n}\r\n\r\nexport default App;","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Auth\\use-auth.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Auth\\useLocalStorage.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Auth\\useLocalstorage.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\index.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\UI\\Spinner.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Auth\\useFetch.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\PrivateRouth.js",["125"],"import { Route, Redirect } from 'react-router-dom';\r\nimport { useAuth } from '../Auth/use-auth';\r\nimport Spinner from './UI/Spinner';\r\n\r\n// A wrapper for <Route> that redirects to the login\r\n// screen if user not yet authenticated.\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n  let auth = useAuth();\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) => {\r\n        return auth.user ? (\r\n          children\r\n        ) : (\r\n          // <Redirect\r\n          //   to={{\r\n          //     pathname: '/',\r\n          //     state: { from: location },\r\n          //   }}\r\n          // />\r\n          <Spinner />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\HeaderComponent\\Header.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\HeaderComponent\\Logo.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Pages\\StudentPages\\HomePage.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\LoginForm.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\HeroImage\\HeroImage.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Pages\\StudentPages\\RegisterPage.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\RegisterForm.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\FooterComponent\\Footer.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\Pages\\StudentPages\\StudentMainPage.js",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\StudentSideBar.jsx",[],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\StudentModulesBody.js",["126"],"import React,{useState} from 'react';\r\nimport {Route,Link} from 'react-router-dom';\r\nimport useFetch from '../../Auth/useFetch';\r\nimport Spinner from '../UI/Spinner';\r\nimport \"./StudentModulesBody.scss\";\r\n//import JavaScript from \"../../components/StudentComponents/Modules Components/JavaScript/JavaScript\";\r\n\r\n\r\n\r\n\r\nexport default function StudentModulesBody() {\r\n\r\n   let { status, data, error } = useFetch('http://localhost:3001/api/subjects');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <SubjectList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n  \r\nconst SubjectList = ({ data }) => {\r\n  const [subjects, setSubjects] = useState(data);\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      \r\n\r\n      <div className=\"row\">\r\n          {subjects.map(({ name }) => (\r\n            <div>\r\n              <div className=\"text-center modules\" key={name}>\r\n                <Link to={`/modules/${name}`}>\r\n                <h2 className=\"\">{name}</h2>\r\n                </Link>\r\n                \r\n            </div>\r\n             <Route path={`/modules/${name}`} component={name} />\r\n             </div>\r\n          ))\r\n          }\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\JavaScript\\JavaScript.jsx",["127","128","129"],"C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\HTML-CSS\\HTML_CSS.jsx",["130","131"],"\r\nimport React, { useState } from \"react\";\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport { Table, Button, Tag } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./HTML_CSS.scss\";\r\n\r\n\r\nexport default function HTML_CSS() {\r\n  let { status, data, error } = useFetch(\r\n    \"http://localhost:3001/api/Modules/HTML_CSS/Topics\"\r\n  );\r\n  console.log(data);\r\n\r\n  if (status === \"error\") {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === \"success\") {\r\n    return <HtmlTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n}\r\n\r\nconst HtmlTopicList = ({ data }) => {\r\n  // let history = useHistory();\r\n  //let auth = useAuth();\r\n\r\n  console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"HTML-CSS Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\NodeJS\\NodeJS.jsx",["132","133"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./NodeJS.scss\";\r\n//import { ReactDOM } from 'react-dom';\r\n\r\nexport default function NodeJS() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/NodeJS/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <NodeJsTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst NodeJsTopicList = ({ data }) => {\r\n  console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"NodeJS Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\PostgreSQL\\PostgreSQL.jsx",["134","135"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./PostgreSQL.scss\";\r\n\r\n\r\nexport default function PostgreSQL() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/PostgreSQL/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <PostgreSqlTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst PostgreSqlTopicList = ({ data }) => {\r\n\r\n  console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"PostgreSQL Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\REACTJS\\REACTJS.jsx",["136","137"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./REACTJS.scss\";\r\n\r\n\r\nexport default function ReactJs() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/ReactJs/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <ReactJsTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst ReactJsTopicList = ({ data }) => {\r\n\r\n  console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"ReactJs Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};","C:\\Users\\murse\\Documents\\GitHub\\CYF-FINAL-PROJECT\\frontend\\src\\components\\StudentComponents\\Modules Components\\Git-GitHub\\Git_Github.jsx",["138","139"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./Git_GitHub.scss\";\r\n\r\n\r\nexport default function Git_GitHub() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/Git-GitHub/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <GitTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst GitTopicList = ({ data }) => {\r\n\r\n  console.log(\"this the data\", data);\r\n  const tableHeaders = [20, 40, 60, 80, 100];\r\n\r\n  const [state, setState] = useState({\r\n    task: { options: tableHeaders, extras: data },\r\n    selected: {},\r\n  });\r\n  const onRadioChange = (e) => {\r\n    console.log(e.currentTarget);\r\n    let name = e.currentTarget.id;\r\n    let value = e.currentTarget.value;\r\n    setState({\r\n      ...state,\r\n      selected: { ...state.selected, [name]: value },\r\n    });\r\n  };\r\n  const onSubmit = () => {\r\n    // convert TO array\r\n    const results = [];\r\n    for (const [key, value] of Object.entries(state.selected)) {\r\n      results.push({\r\n        topic_id: key,\r\n        vote: value,\r\n      });\r\n    }\r\n    fetch(\"http://localhost:3001/api/add-grade\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${JSON.parse(\r\n          window.localStorage.getItem(\"token\")\r\n        )}`,\r\n      },\r\n      body: JSON.stringify(results),\r\n    });\r\n  };\r\n  let columns = [];\r\n  columns.push({\r\n    title: \"Git/GitHub Topics\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"45vw\",\r\n  });\r\n  state.task.options.forEach((option, i) => {\r\n    columns.push({\r\n      title: option,\r\n      key: option,\r\n      render: (row) => {\r\n        return (\r\n          <input\r\n            type=\"radio\"\r\n            checked={state.selected[row.id] == option}\r\n            onChange={onRadioChange}\r\n            name={row.name}\r\n            id={row.id}\r\n            value={option}\r\n          />\r\n        );\r\n      },\r\n    });\r\n  });\r\n  let rowHeaders = [];\r\n  state.task.extras.forEach((extra, i) => {\r\n    rowHeaders.push({ id: extra.topic_id, name: `${i + 1}.${extra.name}` });\r\n  });\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        dataSource={rowHeaders}\r\n        size=\"middle\"\r\n        bordered\r\n        pagination={false}\r\n      />\r\n      {/* <Tag color=\"red\">Selected options</Tag> */}\r\n      <br />\r\n      {JSON.stringify(state.selected)}\r\n      <br />\r\n      <Button onClick={onSubmit} type=\"primary\">\r\n        {\" \"}\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};",{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"140","replacedBy":"144"},{"ruleId":"142","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":43,"column":11,"nodeType":"148","endLine":43,"endColumn":24},{"ruleId":"149","severity":1,"message":"150","line":1,"column":17,"nodeType":"151","messageId":"152","endLine":1,"endColumn":25},{"ruleId":"149","severity":1,"message":"153","line":26,"column":20,"nodeType":"151","messageId":"152","endLine":26,"endColumn":31},{"ruleId":"149","severity":1,"message":"154","line":4,"column":25,"nodeType":"151","messageId":"152","endLine":4,"endColumn":28},{"ruleId":"149","severity":1,"message":"155","line":47,"column":9,"nodeType":"151","messageId":"152","endLine":47,"endColumn":17},{"ruleId":"156","severity":1,"message":"157","line":129,"column":45,"nodeType":"158","messageId":"159","endLine":129,"endColumn":47},{"ruleId":"149","severity":1,"message":"154","line":5,"column":25,"nodeType":"151","messageId":"152","endLine":5,"endColumn":28},{"ruleId":"156","severity":1,"message":"157","line":80,"column":45,"nodeType":"158","messageId":"159","endLine":80,"endColumn":47},{"ruleId":"149","severity":1,"message":"154","line":4,"column":24,"nodeType":"151","messageId":"152","endLine":4,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":75,"column":45,"nodeType":"158","messageId":"159","endLine":75,"endColumn":47},{"ruleId":"149","severity":1,"message":"154","line":4,"column":24,"nodeType":"151","messageId":"152","endLine":4,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":76,"column":45,"nodeType":"158","messageId":"159","endLine":76,"endColumn":47},{"ruleId":"149","severity":1,"message":"154","line":4,"column":24,"nodeType":"151","messageId":"152","endLine":4,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":76,"column":45,"nodeType":"158","messageId":"159","endLine":76,"endColumn":47},{"ruleId":"149","severity":1,"message":"154","line":4,"column":24,"nodeType":"151","messageId":"152","endLine":4,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":76,"column":45,"nodeType":"158","messageId":"159","endLine":76,"endColumn":47},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],["160"],["161"],"react/jsx-pascal-case","Imported JSX component Git_GitHub must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'setSubjects' is assigned a value but never used.","'Tag' is defined but never used.","'addValue' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]
=======
[{"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\index.js":"1","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\App.js":"2","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\use-auth.js":"3","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\FooterComponent\\Footer.js":"4","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\StudentMainPage.js":"5","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\index.js":"6","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\useLocalstorage.js":"7","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\StudentSideBar.jsx":"8","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\useFetch.js":"9","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\UI\\Spinner.js":"10","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\PrivateRouth.js":"11","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\RegisterPage.js":"12","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\HomePage.js":"13","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\HeaderComponent\\Header.js":"14","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\RegisterForm.js":"15","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\LoginForm.js":"16","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\HeaderComponent\\Logo.js":"17","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\HeroImage\\HeroImage.js":"18","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\Git-GitHub\\Git_Github.jsx":"19","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\PostgreSQL\\PostgreSQL.jsx":"20","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\JavaScript\\JavaScript.jsx":"21","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\NodeJS\\NodeJS.jsx":"22","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\REACTJS\\REACTJS.jsx":"23","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\HTML-CSS\\HTML_CSS.jsx":"24","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\StudentModulesBody.js":"25","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\Git-GitHub\\Git_GitHub.jsx":"26"},{"size":249,"mtime":1609870603604,"results":"27","hashOfConfig":"28"},{"size":2037,"mtime":1610208824127,"results":"29","hashOfConfig":"28"},{"size":2822,"mtime":1609870603557,"results":"30","hashOfConfig":"28"},{"size":615,"mtime":1609942568242,"results":"31","hashOfConfig":"28"},{"size":433,"mtime":1610133669604,"results":"32","hashOfConfig":"28"},{"size":363,"mtime":1610133669634,"results":"33","hashOfConfig":"28"},{"size":1341,"mtime":1609870603557,"results":"34","hashOfConfig":"28"},{"size":1167,"mtime":1610133669634,"results":"35","hashOfConfig":"28"},{"size":1022,"mtime":1609870603557,"results":"36","hashOfConfig":"28"},{"size":308,"mtime":1609870603604,"results":"37","hashOfConfig":"28"},{"size":703,"mtime":1609870603604,"results":"38","hashOfConfig":"28"},{"size":628,"mtime":1610133669600,"results":"39","hashOfConfig":"28"},{"size":849,"mtime":1610133669582,"results":"40","hashOfConfig":"28"},{"size":1221,"mtime":1609870603604,"results":"41","hashOfConfig":"28"},{"size":4352,"mtime":1610208069740,"results":"42","hashOfConfig":"28"},{"size":2486,"mtime":1610133669606,"results":"43","hashOfConfig":"28"},{"size":317,"mtime":1609870603604,"results":"44","hashOfConfig":"28"},{"size":400,"mtime":1609870603604,"results":"45","hashOfConfig":"28"},{"size":0,"mtime":1610208536595,"results":"46","hashOfConfig":"28"},{"size":2705,"mtime":1610133669624,"results":"47","hashOfConfig":"28"},{"size":2719,"mtime":1610133669620,"results":"48","hashOfConfig":"28"},{"size":2685,"mtime":1610133669622,"results":"49","hashOfConfig":"28"},{"size":2690,"mtime":1610133669626,"results":"50","hashOfConfig":"28"},{"size":3067,"mtime":1610133669616,"results":"51","hashOfConfig":"28"},{"size":1255,"mtime":1610133669634,"results":"52","hashOfConfig":"28"},{"size":2652,"mtime":1610208544939,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1a2chu2",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\index.js",[],["113","114"],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\App.js",["115"],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\use-auth.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\FooterComponent\\Footer.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\StudentMainPage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\index.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\useLocalstorage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\StudentSideBar.jsx",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Auth\\useFetch.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\UI\\Spinner.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\PrivateRouth.js",["116"],"import { Route, Redirect } from 'react-router-dom';\r\nimport { useAuth } from '../Auth/use-auth';\r\nimport Spinner from './UI/Spinner';\r\n\r\n// A wrapper for <Route> that redirects to the login\r\n// screen if user not yet authenticated.\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n  let auth = useAuth();\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) => {\r\n        return auth.user ? (\r\n          children\r\n        ) : (\r\n          // <Redirect\r\n          //   to={{\r\n          //     pathname: '/',\r\n          //     state: { from: location },\r\n          //   }}\r\n          // />\r\n          <Spinner />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\RegisterPage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\Pages\\StudentPages\\HomePage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\HeaderComponent\\Header.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\RegisterForm.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\LoginForm.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\HeaderComponent\\Logo.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\HeroImage\\HeroImage.js",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\Git-GitHub\\Git_Github.jsx",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\PostgreSQL\\PostgreSQL.jsx",["117"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./PostgreSQL.scss\";\r\n//import { ReactDOM } from 'react-dom';\r\n\r\nexport default function PostgreSQL() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/PostgreSQL/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <PostgreSqlTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst PostgreSqlTopicList = ({data})=> {\r\n  console.log('this the data', data);\r\n    const tableHeaders = [\"0%-20%\", \"20%-40%\", \"40%-60%\", \"60%-80%\", \"80%-100%\"]\r\n    \r\n    const [state, setState] = useState({\r\n        task: { options: tableHeaders,\r\n         extras: data},\r\n        selected: {}\r\n      }\r\n      )\r\n      const onRadioChange = e => {\r\n        let name = e.currentTarget.name;\r\n        let value = e.currentTarget.value;\r\n        setState({\r\n          ...state,\r\n          selected: { ...state.selected, [name]: value }\r\n        });\r\n      };\r\n      const onSubmit = () => {\r\n        console.log(state.selected);\r\n        setState({\r\n          ...state,\r\n          selected: {}\r\n        });\r\n      };\r\n        let columns = [];\r\n        columns.push({\r\n          title: \"Topics\",\r\n          dataIndex: \"name\",\r\n          key: \"name\",\r\n          width: \"45vw\"\r\n        });\r\n        state.task.options.forEach((option, i) => {\r\n          columns.push({\r\n            title: option,\r\n            key: option,\r\n            render: row => {\r\n              return (\r\n                <input\r\n                  type=\"radio\"\r\n                  checked={state.selected[row.name] === option}\r\n                  onChange={onRadioChange}\r\n                  name={row.name}\r\n                  value={option}\r\n                />\r\n              );\r\n            }\r\n          });\r\n        });\r\n        let rowHeaders = [];\r\n        state.task.extras.forEach((extra, i) => {\r\n          rowHeaders.push({ name: `${i + 1}.${extra.name}` });\r\n        });\r\n        return (\r\n          <div>\r\n            <Table\r\n              columns={columns}\r\n              dataSource={rowHeaders}\r\n              size=\"middle\"\r\n              bordered\r\n              pagination={false}\r\n            />\r\n            <Tag color=\"red\">Selected options</Tag>\r\n            <br />\r\n            {JSON.stringify(state.selected)}\r\n            <br />\r\n            <Button onClick={onSubmit} type=\"primary\">\r\n              {\" \"}\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        );\r\n}\r\n","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\JavaScript\\JavaScript.jsx",["118"],"\r\nimport React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./JavaScript.scss\";\r\n//import { ReactDOM } from 'react-dom';\r\n\r\nexport default function JavaScript() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/JavaScript/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <JavaScriptTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst JavaScriptTopicList = ({data})=> {\r\n  console.log('this the data', data);\r\n    const tableHeaders = [\"0%-20%\", \"20%-40%\", \"40%-60%\", \"60%-80%\", \"80%-100%\"]\r\n    \r\n    const [state, setState] = useState({\r\n        task: { options: tableHeaders,\r\n         extras: data},\r\n        selected: {}\r\n      }\r\n      )\r\n      const onRadioChange = e => {\r\n        let name = e.currentTarget.name;\r\n        let value = e.currentTarget.value;\r\n        setState({\r\n          ...state,\r\n          selected: { ...state.selected, [name]: value }\r\n        });\r\n      };\r\n      const onSubmit = () => {\r\n        console.log(state.selected);\r\n        setState({\r\n          ...state,\r\n          selected: {}\r\n        });\r\n      };\r\n        let columns = [];\r\n        columns.push({\r\n          title: \"Topics\",\r\n          dataIndex: \"name\",\r\n          key: \"name\",\r\n          width: \"45vw\"\r\n        });\r\n        state.task.options.forEach((option, i) => {\r\n          columns.push({\r\n            title: option,\r\n            key: option,\r\n            render: row => {\r\n              return (\r\n                <input\r\n                  type=\"radio\"\r\n                  checked={state.selected[row.name] === option}\r\n                  onChange={onRadioChange}\r\n                  name={row.name}\r\n                  value={option}\r\n                />\r\n              );\r\n            }\r\n          });\r\n        });\r\n        let rowHeaders = [];\r\n        state.task.extras.forEach((extra, i) => {\r\n          rowHeaders.push({ name: `${i + 1}.${extra.name}` });\r\n        });\r\n        return (\r\n          <div>\r\n            <Table\r\n              columns={columns}\r\n              dataSource={rowHeaders}\r\n              size=\"middle\"\r\n              bordered\r\n              pagination={false}\r\n            />\r\n            <Tag color=\"red\">Selected options</Tag>\r\n            <br />\r\n            {JSON.stringify(state.selected)}\r\n            <br />\r\n            <Button onClick={onSubmit} type=\"primary\">\r\n              {\" \"}\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        );\r\n}\r\n\r\n\r\n\r\n\r\n    ","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\NodeJS\\NodeJS.jsx",["119"],"import React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./NodeJS.scss\";\r\n//import { ReactDOM } from 'react-dom';\r\n\r\nexport default function NodeJS() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/NodeJS/Topics');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <NodeJsTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst NodeJsTopicList = ({data})=> {\r\n  console.log('this the data', data);\r\n    const tableHeaders = [\"0%-20%\", \"20%-40%\", \"40%-60%\", \"60%-80%\", \"80%-100%\"]\r\n    \r\n    const [state, setState] = useState({\r\n        task: { options: tableHeaders,\r\n         extras: data},\r\n        selected: {}\r\n      }\r\n      )\r\n      const onRadioChange = e => {\r\n        let name = e.currentTarget.name;\r\n        let value = e.currentTarget.value;\r\n        setState({\r\n          ...state,\r\n          selected: { ...state.selected, [name]: value }\r\n        });\r\n      };\r\n      const onSubmit = () => {\r\n        console.log(state.selected);\r\n        setState({\r\n          ...state,\r\n          selected: {}\r\n        });\r\n      };\r\n        let columns = [];\r\n        columns.push({\r\n          title: \"Topics\",\r\n          dataIndex: \"name\",\r\n          key: \"name\",\r\n          width: \"45vw\"\r\n        });\r\n        state.task.options.forEach((option, i) => {\r\n          columns.push({\r\n            title: option,\r\n            key: option,\r\n            render: row => {\r\n              return (\r\n                <input\r\n                  type=\"radio\"\r\n                  checked={state.selected[row.name] === option}\r\n                  onChange={onRadioChange}\r\n                  name={row.name}\r\n                  value={option}\r\n                />\r\n              );\r\n            }\r\n          });\r\n        });\r\n        let rowHeaders = [];\r\n        state.task.extras.forEach((extra, i) => {\r\n          rowHeaders.push({ name: `${i + 1}.${extra.name}` });\r\n        });\r\n        return (\r\n          <div>\r\n            <Table\r\n              columns={columns}\r\n              dataSource={rowHeaders}\r\n              size=\"middle\"\r\n              bordered\r\n              pagination={false}\r\n            />\r\n            <Tag color=\"red\">Selected options</Tag>\r\n            <br />\r\n            {JSON.stringify(state.selected)}\r\n            <br />\r\n            <Button onClick={onSubmit} type=\"primary\">\r\n              {\" \"}\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        );\r\n}\r\n","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\REACTJS\\REACTJS.jsx",[],"C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\HTML-CSS\\HTML_CSS.jsx",["120"],"\r\nimport React , {useState} from 'react';\r\nimport useFetch from \"../../../../Auth/useFetch\";\r\nimport Spinner from \"../../../UI/Spinner\";\r\nimport {Table, Button, Tag} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport \"./HTML_CSS.scss\";\r\n//import { ReactDOM } from 'react-dom';\r\n\r\nexport default function HTML_CSS() {\r\n  let { status, data, error } = useFetch('http://localhost:3001/api/Modules/HTML_CSS/Topics');\r\n  console.log(data);\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <HtmlTopicList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\nconst HtmlTopicList = ({data})=> {\r\n  console.log('this the data', data);\r\n    const tableHeaders = [20,40,60,80,100]\r\n    \r\n    const [state, setState] = useState({\r\n        task: { options: tableHeaders,\r\n         extras: data},\r\n        selected: {}\r\n      }\r\n      )\r\n      const onRadioChange =  e => {\r\n        let name = e.currentTarget.name;\r\n        let value = e.currentTarget.value;\r\n        setState({\r\n          ...state,\r\n           selected: { ...state.selected, [name]: value }\r\n        });\r\n      };\r\n      const onSubmit =  () => {\r\n      //   let name = e.currentTarget.name;\r\n      //   let value = e.currentTarget.value;\r\n\r\n      //   const body = setState(state.value);\r\n      //   const response =  fetch(\"http://localhost:3001/api/add-grade\", {\r\n      //     method : \"POST\",\r\n      //     headers : {\"Content-Type\" : \"application/json\"},\r\n      //     body: JSON.stringify(body)\r\n      // });\r\n        console.log(state.selected);\r\n        setState({\r\n          ...state,\r\n          selected: {}\r\n        });\r\n      };\r\n        let columns = [];\r\n        columns.push({\r\n          title: \"Topics\",\r\n          dataIndex: \"name\",\r\n          key: \"name\",\r\n          width: \"45vw\"\r\n        });\r\n        state.task.options.forEach((option, i) => {\r\n          columns.push({\r\n            title: option,\r\n            key: option,\r\n            render: row => {\r\n              return (\r\n                <input\r\n                  type=\"radio\"\r\n                  checked={state.selected[row.name] == option}\r\n                  onChange={onRadioChange}\r\n                  name={row.name}\r\n                  value={option}\r\n                />\r\n              );\r\n            }\r\n          });\r\n        });\r\n        let rowHeaders = [];\r\n        state.task.extras.forEach((extra, i) => {\r\n          rowHeaders.push({ name: `${i + 1}.${extra.name}` });\r\n        });\r\n        return (\r\n          <div>\r\n            <Table\r\n              columns={columns}\r\n              dataSource={rowHeaders}\r\n              size=\"middle\"\r\n              bordered\r\n              pagination={false}\r\n            />\r\n            {/* <Tag color=\"red\">Selected options</Tag> */}\r\n            <br />\r\n           {JSON.stringify(state.selected)}\r\n            <br />\r\n            <Button onClick={onSubmit} type=\"primary\">\r\n              {\" \"}\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        );\r\n}\r\n\r\n    ","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\StudentModulesBody.js",["121"],"import React,{useState} from 'react';\r\nimport {Route,Link} from 'react-router-dom';\r\nimport useFetch from '../../Auth/useFetch';\r\nimport Spinner from '../UI/Spinner';\r\nimport \"./StudentModulesBody.scss\";\r\n//import JavaScript from \"../../components/StudentComponents/Modules Components/JavaScript/JavaScript\";\r\n\r\n\r\n\r\n\r\nexport default function StudentModulesBody() {\r\n\r\n   let { status, data, error } = useFetch('http://localhost:3001/api/subjects');\r\n\r\n  if (status === 'error') {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (status === 'success') {\r\n    return <SubjectList data={data} />;\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n\r\n}\r\n  \r\nconst SubjectList = ({ data }) => {\r\n  const [subjects, setSubjects] = useState(data);\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      \r\n\r\n      <div className=\"row\">\r\n          {subjects.map(({ name }) => (\r\n            <div>\r\n              <div className=\"text-center modules\" key={name}>\r\n                <Link to={`/modules/${name}`}>\r\n                <h2 className=\"\">{name}</h2>\r\n                </Link>\r\n                \r\n            </div>\r\n             <Route path={`/modules/${name}`} component={name} />\r\n             </div>\r\n          ))\r\n          }\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Saylah Hussain\\Documents\\GitHub\\cyf-final-project\\frontend\\src\\components\\StudentComponents\\Modules Components\\Git-GitHub\\Git_GitHub.jsx",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":43,"column":11,"nodeType":"128","endLine":43,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"133","severity":1,"message":"134","line":60,"column":53,"nodeType":"135","messageId":"136","endLine":60,"endColumn":55},{"ruleId":"129","severity":1,"message":"137","line":23,"column":18,"nodeType":"131","messageId":"132","endLine":23,"endColumn":27},{"ruleId":"133","severity":1,"message":"134","line":56,"column":53,"nodeType":"135","messageId":"136","endLine":56,"endColumn":55},{"ruleId":"133","severity":1,"message":"134","line":64,"column":53,"nodeType":"135","messageId":"136","endLine":64,"endColumn":55},{"ruleId":"129","severity":1,"message":"138","line":26,"column":20,"nodeType":"131","messageId":"132","endLine":26,"endColumn":31},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"react/jsx-pascal-case","Imported JSX component Git_GitHub must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setTopics' is assigned a value but never used.","'setSubjects' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
>>>>>>> Stashed changes
